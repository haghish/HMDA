% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hmda.partition.R
\name{hmda.partition}
\alias{hmda.partition}
\title{Partition a data frame into training, testing, and (optionally) validation sets
and upload it to H2O local server on your machine}
\usage{
hmda.partition(
  df,
  y = NULL,
  train = 0.8,
  test = 0.2,
  validation = NULL,
  global = FALSE,
  seed = 2025
)
}
\arguments{
\item{df}{A data frame.}

\item{y}{A string indicating the name of the outcome column. If provided, it
should match a column name in \code{df}.}

\item{train}{A numeric value indicating the proportion of data for the
training set.}

\item{test}{A numeric value indicating the proportion of data for the
testing set.}

\item{validation}{Optional numeric value indicating the proportion of data
for the validation set. Defaults to \code{NULL}.}

\item{global}{logical. If \code{TRUE}, the created data frames will be
assigned to the global environment and also uploaded to h2o with matching
names.}

\item{seed}{A numeric seed for reproducibility. Defaults to 2025.}
}
\value{
A named list containing the training, testing, and (optionally)
  validation data frames.
}
\description{
This function partitions a data frame into training, testing, and optionally
validation sets. If \code{y} (the name of an outcome column) is provided and
is a factor or character, the function uses stratified splitting to preserve
class proportions. Otherwise, it uses a basic random split. By default, the
sum of \code{train} and \code{test} must be 1 if \code{validation} is not
given. If \code{validation} is specified, \code{train} + \code{test} +
\code{validation} must equal 1.
}
\details{
If \code{global = TRUE}, all partitioned data frames are written into the
global environment and uploaded to an h2o server with names matching those in
the returned list (e.g., "hmda.train" will also generate "hmda.train.hex").
}
\examples{
\dontrun{
# Install/load required packages:
# install.packages("splitTools")
library(splitTools)
library(h2o)
h2o.init()

# Using the iris dataset:
data(iris)

# 1) Random partition: 80\% train, 20\% test
splits <- hmda.partition(
  df = iris,
  train = 0.8,
  test = 0.2,
  global = FALSE
)
train_data <- splits$hmda.train
test_data  <- splits$hmda.test

# 2) Stratified partition: 70\% train, 15\% test, 15\% validation
splits_strat <- hmda.partition(
  df = iris,
  y = "Species",
  train = 0.7,
  test = 0.15,
  validation = 0.15,
  global = FALSE
)
train_data_strat <- splits_strat$hmda.train
test_data_strat  <- splits_strat$hmda.test
validation_data_strat <- splits_strat$hmda.validation

# 3) With global=TRUE, data frames are created in the global environment
#    and also uploaded to h2o (e.g., hmda.train and hmda.train.hex).
}

}
